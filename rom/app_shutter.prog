
ifdef COMPILE_SHUTTER

shutter_init:
	rtn wake	
	hfetch 1,core_gpio_sel1
	and_into 0xfc,pdata
	hstore 1,core_gpio_sel1
	setarg shutter_le_before_hibernate
	store 2,mem_cb_before_hibernate

	setarg shutter_process_lpm_before
	store 2,mem_cb_before_lpm
	
	setarg app_enter_hibernate
	store 2,mem_cb_discovry_timeout
	
	setarg shutter_process_idle
	store 2,mem_cb_idle_process
		
	setarg shutter_process_bb_event 
	store 2,mem_cb_bb_event_process

	setarg shutter_le_scale_lpm_lock
	store 2,mem_cb_check_wakelock
	
	setarg ble_shutter_receive_data
	store 2,mem_cb_att_write

	setarg shutter_le_bb_event_timer
	store 2,mem_cb_event_timer

	setarg shutter_key_change
	store 2,mem_cb_shutter_keycan

	setarg shutter_soft_swtich_power_on
	store 2,mem_shutter_soft_switch_poweron_callback_function
	setarg shutter_soft_swtich_power_off
	store 2,mem_shutter_soft_switch_poweroff_callback_function

	call le_modified_name
	call shutter_load_bluetooth_config_by_user_config
	call shutter_init_bluetooth_config
	call shutter_init_param	
	call keyscan_key_init
	call shutter_load_buffer_config_form_DataRom
	call queue_init
	call ui_led_init_global
	call shutter_load_bluetooth_config
	call shutter_load_bluetooth_config_by_eeprom
	
	bpatch patch1e_5,mem_patch1e
	call classic_shutter_load_reconn_info
	fetch 1, mem_shutter_hard_soft_switch_case
	beq HARD_SWITCH, shutter_hart_swtich_power_on
	fetch 1,mem_shutter_soft_switch_button_gpio
	store 1,mem_ui_button_gpio
	branch ui_soft_swtich_init

/**************hard swtich function**************/
shutter_hart_swtich_power_on:
	jam UI_BUTTON_GPIO_DISABLE,mem_ui_button_gpio
	jam SS_STATE_POWER_ON,mem_shutter_soft_switch_power_state
	branch shutter_start_reconnect
/****************************/

/**************lpm lock callback function**************/
shutter_le_scale_lpm_lock:
	fetch 1,mem_shutter_soft_switch_power_state
	beq SS_STATE_POWER_OFF,app_get_lpm_wake_lock
	call l2cap_malloc_get_full_map
	fetch 1,mem_used_map
	nbranch app_get_lpm_wake_lock,blank
	branch app_put_lpm_wake_lock
/****************************/

/**************c512bt event callback function*************/
shutter_process_bb_event:
	copy regc,pdata
/**************classic shutter event*****************/
	beq BT_EVT_BB_CONNECTED,classic_shutter_process_baseband_connect
	beq BT_EVT_BB_DISCONNECTED,classic_shutter_process_baseband_disconnect
	beq BT_EVT_RECONN_FAILED,classic_shutter_process_reconnect_failed
	beq BT_EVT_SETUP_COMPLETE,classic_shutter_process_setup_complete
	beq BT_EVT_HID_CONNECTED,classic_shutter_process_hid_connect
	beq BT_EVT_HID_DISCONNECTED,classic_shutter_process_hid_disconnect
	beq BT_EVT_HID_HANDSHAKE,classic_shutter_process_hid_handshake
	beq BT_EVT_RECONN_PAGE_TIMEOUT,classic_shutter_process_reconnect_page_timeout
	beq BT_EVT_VIRTUAL_CABLE_UNPLUG,classic_shutter_process_virtual_cable_unplug
	beq BT_EVT_REMOTE_UNSNIFF,classic_shutter_process_remote_unsniff
	beq BT_EVT_STORE_NVRAM,classic_shutter_process_store_reconnect_information
/**************ble shutter event*****************/
	beq BT_EVT_LE_CONNECTED,ble_shutter_process_baseband_connect
	beq BT_EVT_LE_DISCONNECTED,ble_shutter_process_baseband_disconnect
	beq BT_EVT_LE_RECONNECT_COMPLETE,ble_shutter_process_reconnect_complete
	beq BT_EVT_LE_PARSE_CONN_PAPA_UPDATE_RSP,ble_shutter_process_parse_connect_parameter_update_response
/***************soft swtich event****************/
	beq BT_EVT_BUTTON_LONG_PRESSED,shutter_process_soft_swtich_button_long_press
	beq BT_EVT_BUTTON_DOWN,shutter_process_soft_swtich_button_down
	beq BT_EVT_BUTTON_UP,shutter_process_soft_swtich_button_up
	rtn
/****************************/


/******************classic shutter event**********************/
classic_shutter_process_baseband_connect:
	jam 0,mem_classic_shutter_hid_disconn_count
	jam 0,mem_classic_shutter_cable_unplug_conut	
	rtn


classic_shutter_process_baseband_disconnect:
	call classic_shutter_disconnect_clear_flag
	branch classic_shutter_process_reconnect_failed

classic_shutter_disconnect_clear_flag:
	jam APP_HANDSHAKE_NULL,mem_app_handshake_flag
	jam 0,mem_hid_handshake_timer_count
	jam 0,mem_unsniff2sniff_timer_count
	jam 0,mem_classic_shutter_cable_unplug_conut
	jam 0,mem_classic_shutter_hid_disconn_count
	branch queue_init


classic_shutter_process_reconnect_failed:
	call app_disconn_reason_clear
	branch shutter_start_bluetooth_discovery


classic_shutter_process_setup_complete:
	call shutter_stop_bluetooth_discovery
	branch app_led_stop_blink


classic_shutter_process_hid_connect:
	setarg HID_HANDSHAKE_TIMEOUT
	store 1,mem_hid_handshake_timer_count
	rtn	


classic_shutter_process_hid_disconnect:
	jam 0,mem_classic_shutter_cable_unplug_conut	
	setarg FLAG_SHUTTER_HID_DISCONN_TIMEOUT
	store 1,mem_classic_shutter_hid_disconn_count
	rtn


classic_shutter_process_hid_handshake:
	fetch 1,mem_app_handshake_flag
	rtneq APP_HANDSHAKE_DONE
	jam APP_HANDSHAKE_DONE,mem_app_handshake_flag
	call app_lpm_mult_enable
	call app_store_reconn_info
	call shutter_stop_bluetooth_discovery
	call app_led_off
	branch app_bt_enter_sniff


classic_shutter_process_reconnect_page_timeout:
	branch classic_shutter_process_reconnect_failed


classic_shutter_process_virtual_cable_unplug:
	setarg FLAG_SHUTTER_CABLE_UNPLUG_TIMEOUT
	store 1,mem_classic_shutter_cable_unplug_conut
	rtn


classic_shutter_process_remote_unsniff:
	branch app_start_auto_sniff


/***************classic shutter store reconn info***********************/
classic_shutter_process_store_reconnect_information:
	arg NVRAM_EEPROM_OFFSET,regb
	fetch 1,mem_nv_data_number
	mul32 pdata,34,temp
	fetch 2,mem_nv_data_ptr
	copy pdata,rega
	branch iicd_write_eep_data

classic_shutter_load_reconn_info:
	arg NVRAM_EEPROM_OFFSET,regb
	fetch 1,mem_shutter_bluetooth_type
	rtnbit0 CLASSIC_SHUTTER
	fetch 1,mem_nv_data_number
	rtn blank
	mul32 pdata,34,temp
	fetch 2,mem_nv_data_ptr
	copy pdata,rega
	branch iicd_read_eep_data
/**************************************/

/******************ble shutter event**********************/
ble_shutter_process_baseband_connect:
	call shutter_stop_bluetooth_discovery
	setarg 0
	store 2,mem_ble_shutter_reconn_timer
	branch app_led_off


ble_shutter_process_baseband_disconnect:
	call queue_init
	jam 0,mem_ble_shutter_enable_notify
	branch shutter_start_reconnect


ble_shutter_process_reconnect_complete:
	call queue_init
	jam 1,mem_ble_shutter_enable_notify
	fetch 8,mem_ble_shutter_interval_min
	store 8,mem_le_interval_min
	call app_lpm_mult_enable
	branch le_l2cap_tx_update_req


ble_shutter_process_parse_connect_parameter_update_response:
	fetch 2,mem_le_l2cap_signaling_conn_param_update_rsp_result
	rtneq BLE_SIGNALING_CONNECT_PARAMETER_UPDATE_ACCEPTED
	fetch 8,mem_ble_shutter_interval_min_new
	rtn blank
	store 8,mem_le_interval_min
	branch le_l2cap_tx_update_req
/**************************************/

/******************soft swtich event**********************/
shutter_process_soft_swtich_button_long_press:
	branch ui_soft_switch_botton_long_press

shutter_process_soft_swtich_button_down:
	fetch 1,mem_shutter_hard_soft_switch_case
	rtneq HARD_SWITCH
	fetch 1,mem_shutter_soft_switch_power_state
	rtnne SS_STATE_POWER_ON
	call shutter_store_currenct_led_state
	branch app_led_on
	
shutter_store_currenct_led_state:
	jam 1,mem_shutter_soft_swtich_botton_down
	arg 11,loopcnt
	arg mem_shutter_soft_swtich_led_struct_temp,contw
	arg mem_shutter_led_struct_app_led,contr
	branch memcpy
	
shutter_process_soft_swtich_button_up:
	fetch 1,mem_shutter_hard_soft_switch_case
	rtneq HARD_SWITCH
	fetch 1,mem_shutter_soft_switch_power_state
	beq SS_STATE_POWER_ON,shutter_load_currenct_led_state
	branch ui_soft_switch_botton_up

shutter_load_currenct_led_state:
	fetch 1,mem_shutter_soft_swtich_botton_down
	rtnne 1
	jam 0,mem_shutter_soft_swtich_botton_down
	fetch 2,mem_ui_state_map
	bbit1 UI_STATE_BT_CONNECTED,app_led_off
	bbit1 UI_STATE_BLE_CONNECTED,app_led_off
	arg 11,loopcnt
	arg mem_shutter_soft_swtich_led_struct_temp,contr
	arg mem_shutter_led_struct_app_led,contw
	branch memcpy
	
/**************************************/


shutter_le_bb_event_timer:
/**************shutter check sleep timer**********************/
	call shutter_check_sleep_timer
/************************************/
/**************soft reset power off timer**********************/
	call shutter_check_power_off_timer
/************************************/
/**************classic shutter timer**********************/
	call classic_shutter_check_unplug_timer
	call classic_shutter_hid_handshake_timer
	call classic_shutter_hid_disconn_timer
/************************************/
/**************ble shutter timer**********************/
	branch ble_shutter_reconn_timer
/************************************/

/**************shutter check sleep timer**********************/
shutter_check_sleep_timer:
	arg mem_shutter_sleep_timer,regc
	arg shutter_sleep_timeout,regb
	branch timer_single_step_2B
shutter_sleep_timeout:
	jam SS_STATE_POWER_OFF,mem_shutter_soft_switch_power_state
	call app_led_off
	call shutter_disconnect_current_connection
	branch shutter_wait_power_off

/**************soft reset power off timer**********************/
shutter_check_power_off_timer:
	arg mem_shutter_power_off_timer,regc
	arg shutter_check_power_off_timeout,regb
	branch timer_single_step

shutter_check_power_off_timeout:
	fetch 2,mem_ui_state_map
	bbit1 UI_STATE_BLE_CONNECTED,shutter_wait_power_off
	bbit1 UI_STATE_BT_CONNECTED,shutter_wait_power_off
	fetch 1,mem_shutter_led_struct_app_led_type
	beq UI_LED_STATE_BLINK_START,shutter_wait_power_off
	beq UI_LED_STATE_BLINK_LIGHTING,shutter_wait_power_off
	beq UI_LED_STATE_BLINK_DARKING,shutter_wait_power_off
	branch app_enter_hibernate
/************************************/

/**************classic shutter timer**********************/
classic_shutter_check_unplug_timer:
	arg mem_classic_shutter_cable_unplug_conut,regc
	arg classic_shutter_unplug_timeout,regb
	branch timer_single_step
	
classic_shutter_unplug_timeout:
	fetch 1,mem_CONTROL_tasks
	set1  L2CAP_DISCONNECT_INTERRUPT, pdata
	set1  L2CAP_DISCONNECT_CONTROL, pdata
	store 1,mem_CONTROL_tasks	
	rtn

classic_shutter_hid_handshake_timer:
	arg mem_hid_handshake_timer_count,regc
	arg classic_shutter_process_hid_handshake,regb
	branch timer_single_step

classic_shutter_hid_disconn_timer:
	arg mem_classic_shutter_hid_disconn_count,regc
	arg app_bt_disconnect,regb
	branch timer_single_step

/************************************/

/**************ble shutter timer**********************/
ble_shutter_reconn_timer:
	fetch 1,mem_shutter_soft_switch_power_state
	rtnne SS_STATE_POWER_ON
	arg mem_ble_shutter_reconn_timer,regc
	arg shutter_start_bluetooth_discovery,regb
	branch timer_single_step_2B
/************************************/

shutter_process_idle:
	call shutter_send_data_to_master
	branch keyscan_key_process


shutter_process_lpm_before:
	branch keyscan_process_lpm_before

shutter_le_before_hibernate:
	call gpio_set_before_lpm_common
	branch shutter_process_lpm_before

//////////////////////////////////////////////////////////////////////////////////////////


/****************shutter bluetooth control**********************/
shutter_stop_bluetooth_discovery:
	fetch 1,mem_shutter_bluetooth_type
	bbit1 CLASSIC_SHUTTER,classic_shutter_stop_bluetooth_discovery
	bbit1 BLE_SHUTTER,ble_shutter_stop_bluetooth_discovery
	rtn

ble_shutter_stop_bluetooth_discovery:
	fetch 2,mem_ble_shutter_connect_timeout
	store 2,mem_shutter_sleep_timeout
	store 2,mem_shutter_sleep_timer
	branch app_ble_stop_adv
	
classic_shutter_stop_bluetooth_discovery:
	fetch 2,mem_classic_shutter_connect_timeout
	store 2,mem_shutter_sleep_timeout
	store 2,mem_shutter_sleep_timer
	branch app_bt_stop_discovery

shutter_start_bluetooth_discovery:
	fetch 1,mem_shutter_soft_switch_power_state
	rtnne SS_STATE_POWER_ON
	fetch 1,mem_shutter_bluetooth_type
	bbit1 CLASSIC_SHUTTER,classic_shutter_start_discovery
	bbit1 BLE_SHUTTER,ble_shutter_start_discovery
	rtn
	
classic_shutter_start_discovery:
	fetch 2,mem_classic_shutter_discovery_timeout,
	store 2,mem_shutter_sleep_timeout
	store 2,mem_shutter_sleep_timer
	branch app_bt_start_discovery_short

ble_shutter_start_discovery:
	fetch 2,mem_ui_state_map
	rtnbit1 UI_STATE_BLE_CONNECTED
	fetch 2,mem_ble_shutter_discovery_timeout
	store 2,mem_shutter_sleep_timeout
	store 2,mem_shutter_sleep_timer
	fetch 2,mem_ble_shutter_discovery_adv_interval
	call shutter_ble_adv_interval_set
	call app_led_start_blink
	fetch 4,mem_ble_shutter_discovery_blink_on_time
	store 4,mem_shutter_led_struct_app_led_on_time
	fetch 2,mem_ui_state_map
	rtnbit1 UI_STATE_BLE_ADV
	branch app_ble_start_adv


shutter_start_reconnect:
	fetch 1,mem_shutter_soft_switch_power_state
	rtnne SS_STATE_POWER_ON
	fetch 1,mem_shutter_bluetooth_type
	bbit1 CLASSIC_SHUTTER,classic_shutter_start_reconnect
	bbit1 BLE_SHUTTER,ble_shutter_start_reconnect
	rtn

classic_shutter_start_reconnect:
	call app_check_reconn_target
	branch shutter_start_bluetooth_discovery,blank
	call app_led_on	
	call app_bt_stop_discovery
	branch app_bt_start_reconnect	

ble_shutter_start_reconnect:
	fetch 2,mem_ble_shutter_reconn_timer
	fetcht 2,mem_ble_shutter_reconn_timeout
	storet 2,mem_ble_shutter_reconn_timer
	nrtn blank
	fetch 2,mem_ble_shutter_reconn_dav_interval
	call shutter_ble_adv_interval_set
	call app_led_start_blink
	fetch 4,mem_ble_shutter_reconn_blink_on_time
	store 4,mem_shutter_led_struct_app_led_on_time
	fetch 2,mem_ui_state_map
	rtnbit1 UI_STATE_BLE_ADV
	branch app_ble_start_adv

//pdata:adv interval value
shutter_ble_adv_interval_set:
	store 2,mem_lpm_interval
	increase -4,pdata
	store 2,mem_le_adv_interval
	rtn


shutter_disconnect_current_connection:
	fetch 2,mem_ui_state_map
	bbit1 UI_STATE_BLE_CONNECTED,app_ble_disconnect
	bbit1 UI_STATE_BT_CONNECTED,app_bt_disconnect
	branch shutter_stop_bluetooth_discovery
/**************************************/

/******************classic shutter load reconnect*********************/
app_check_reconn_target:
	fetch 1,mem_nv_data_number
	copy pdata,loopcnt
	fetch 2,mem_nv_data_ptr
	copy pdata,rega
app_check_reconn_target_loop:
	ifetch 2,rega
	beq 0,found_reconn_device
	increase NV_DATA_LEN,rega
	loop app_check_reconn_target_loop
	branch enable_blank

found_reconn_device:
	ifetch 6,contr
	store 6,mem_hci_plap
	increase 10,contr
	arg mem_link_key,contw
	call  memcpy16
	call check_link_key_load
	branch disable_blank
	
/**************************************/

/////////////////////////////////////////////////////////////////////////
//output:if user is enable,mean,can send data
shutter_check_data_enable:
	call disable_user
	fetch 2,mem_ui_state_map
	bbit1 UI_STATE_BT_CONNECTED,shutter_check_bt_data_enable
	bbit1 UI_STATE_BLE_CONNECTED,shutter_check_ble_data_enable
	rtn

shutter_check_bt_data_enable:
	fetch 1,mem_hid_interrupt_state
	rtnne 0x3f	
	branch enable_user

shutter_check_ble_data_enable:
	fetch 1,mem_ble_shutter_enable_notify
	rtn blank
	branch enable_user
/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
//output:if user is enable,mean,bluetooth disconnect
shutter_check_bluetooth_conn:
	call disable_user
	fetch 2,mem_ui_state_map
	rtnbit1 UI_STATE_BT_CONNECTED
	rtnbit1 UI_STATE_BLE_CONNECTED
	branch enable_user
/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
shutter_change_bluetooth_status_bt_disconn:
	fetch 1,mem_shutter_bluetooth_type
	bbit1 CLASSIC_SHUTTER,classic_shutter_change_bluetooth_status_bt_disconn
	bbit1 BLE_SHUTTER,ble_shutter_change_bluetooth_status_bt_disconn
	rtn
	
classic_shutter_change_bluetooth_status_bt_disconn:
	fetch 1,mem_scan_mode
	rtnne 0x03
	branch shutter_start_reconnect
	
ble_shutter_change_bluetooth_status_bt_disconn:
	branch shutter_start_reconnect

/////////////////////////////////////////////////////////////////////////
shutter_check_send_data:
	disable user2
	fetch 2,mem_shutter_sleep_timeout
	store 2,mem_shutter_sleep_timer

	call shutter_check_bluetooth_conn
	branch shutter_change_bluetooth_status_bt_disconn,user
	
	call shutter_check_data_enable
	nrtn user
	enable user2
	rtn

//queue = key index
//rega =1 press, =0 release
shutter_key_change:
	call shutter_check_send_data
	nrtn user2
	deposit rega
	branch shutter_key_release,blank
shutter_key_press:
	call app_led_on
	arg mem_key0_press,regc
	branch push_queue_press_or_release

shutter_key_release:
	call app_led_off
	arg mem_key0_release,regc

push_queue_press_or_release:
	arg MAX_QUEUE_NUM,pdata
	imul32 queue,pdata
	iadd regc,regc
	
//input:regc the address that want push to queue buffer
push_buffer_in_queue:
	ifetch 1,regc
	rtn blank
	call queue_push_one_byte
	increase 1,regc
	branch push_buffer_in_queue


shutter_send_data_to_master:
	fetch 2,mem_ui_state_map
	bbit1 UI_STATE_BLE_CONNECTED,pop_queue_to_ble_data
	bbit1 UI_STATE_BT_CONNECTED,pop_queue_to_classic_data
	rtn

pop_queue_to_ble_data:
	call le_fifo_check_nearly_full
	nrtn blank
	call queue_pop_one_byte
	nrtn user
	pincrease -1
	mul32 pdata,SHUTTER_BLE_DATA_BUFFER,pdata
	arg mem_ble_data_buffer1,temp
	iadd temp,contr
le_send_notify_from_list:
	ifetch 1,contr	//length 
	copy pdata,rega
	ifetcht 2,contr	//handle
	call store_contr
	call le_att_malloc_tx_notify
	copy rega,loopcnt
	call get_contr
	branch memcpy


pop_queue_to_classic_data:
	call l2cap_malloc_is_fifo_nearly_full
	nrtn blank
	call queue_pop_one_byte
	nrtn user
	pincrease -1
	mul32 pdata,SHUTTER_CLASSIC_DATA_BUFFER,pdata
	arg mem_classic_data_buffer1,temp
	iadd temp,contr
	ifetch 5,contr
	store 5,mem_classic_data_buffer
classic_send_hid_data:
	fetch 1,mem_classic_data_buffer
	copy pdata,rega
	call hid_malloc_tx_buff
	fetch 2,mem_hid_int_remote_cid
	istore 2,contw
	setarg 0xa1
	istore 1,contw
	fetch 4,mem_classic_data_buffer + 1
	istore 9,contw
	rtn

///////////queue function////////////
//input:pdata is data that want push
queue_push_one_byte:
	store 1,mem_pdatatemp
	arg mem_pdatatemp,rega
	branch queue_push

queue_pop_one_byte:
	arg mem_pdatatemp,rega
	call queue_pop
	nrtn user
	fetch 1,mem_pdatatemp
	rtn

///////////queue function ending////////////
ble_shutter_receive_data:
	fetch 2,mem_le_att_handle
	beq GATT_KEYBOARD_WRITE_HANDLE,ble_shutter_process_reconnect_complete
	rtn

shutter_init_param:
	setarg 0x02
	store 1,mem_shutter_power_off_timeout
/////////////ble connect interval//////////////
	setarg 0x00200008
	store 4,mem_ble_shutter_interval_min		//set min interval is 10ms,set max interval is 40ms
	setarg 0x012c0005
	istore 4,contw
///////////////////////////////////////
//////////////////MTU/////////////
	jam 0x17,mem_le_local_mtu
///////////////////////////////////////
////////////////justwork/////////
	setarg 0x1b
 	store 2,mem_le_pairing_handle
 	call le_set_config_fixed_ltk
	call le_set_fixed_ltk
	call le_set_justwork
	branch le_set_config_read_authentication
///////////////////////////////////////

shutter_load_buffer_config_form_DataRom:
///////load data Rom/////////
	arg BLE_KEY_VALUE_LIST_SIZE,loopcnt
	arg mem_ble_data_buffer1,contw
	arg BLE_SHUTTER_KEY_VALUE_LIST,contr
	call memcpy_fast
	arg BT_KEY_VALUE_LIST_SIZE,loopcnt
	arg mem_classic_data_buffer1,contw
	arg CLASSIC_SHUTTER_KEY_VALUE_LIST,contr
	branch memcpy_fast	


shutter_load_ble_gatt_form_DataRom:
	arg BLE_GATT_LIST_SIZE,loopcnt
	arg BLE_SHUTTER_GATT_LIST,contr
	branch memcpy_fast


shutter_load_bt_sdp_form_DataRom:
	arg BT_SDP_LIST_SIZE,loopcnt
	arg CLASSIC_SHUTTER_SDP_LIST,contr
	branch memcpy_fast
	

///////////////////////////////gpio config////////////////////////////////////
shutter_init_bluetooth_config:
	call shutter_check_load_config_flag
	nrtn user
	fetch 1,mem_shutter_config_select_gpio1
	call shutter_init_bluetooth_config_gpio_input
	fetch 1,mem_shutter_config_select_gpio2
	call shutter_init_bluetooth_config_gpio_input
	fetch 1,mem_shutter_config_select_gpio3
	branch shutter_init_bluetooth_config_gpio_input
	
shutter_init_bluetooth_config_gpio_input:
	rtn blank
	or pdata,0x80,temp
	branch gpio_config_input_nowake
	

shutter_load_bluetooth_config:
	call shutter_check_load_config_flag
	nrtn user
	call shutter_load_bluetooth_config_label
	branch shutter_load_bluetooth_config_by_otp

shutter_load_bluetooth_config_label:
	arg 0,rega
	fetch 1,mem_shutter_config_select_gpio1
	call shutter_load_bluetooth_config_read_gpio_input
	nsetflag blank,0,rega
	fetch 1,mem_shutter_config_select_gpio2
	call shutter_load_bluetooth_config_read_gpio_input
	nsetflag blank,1,rega
	fetch 1,mem_shutter_config_select_gpio3
	call shutter_load_bluetooth_config_read_gpio_input
	nsetflag blank,2,rega
	copy rega,pdata
	store 1,mem_shutter_config_label
	fetch 1,mem_shutter_config_size
	imul32 rega,pdata
	fetcht 2,mem_shutter_config_otp_base_address		//base address
	iadd temp,pdata
	store 2,mem_shutter_config_otp_addr
	rtn

shutter_load_bluetooth_config_read_gpio_input:
	rtn blank
	or pdata,0x80,temp
	call gpio_get_bit
	nbranch enable_blank,true
	branch disable_blank
	

shutter_check_load_config_flag:
	call disable_user
	fetch 1,mem_shutter_config_user_size
	nrtn blank
	fetch 1,mem_shutter_config_enable
	rtn blank
	branch enable_user


shutter_load_bluetooth_config_by_otp:
	call otp_enable_chgpump
	fetch 2,mem_shutter_config_otp_addr
	arg mem_shutter_config_data_temp,rega
	fetcht 1,mem_shutter_config_size
	call otpd_read_data
	call otp_disable_chgpump
shutter_load_bluetooth_config_store_name:
	fetch 1,mem_shutter_config_data_temp
	copy pdata,loopcnt
	store 1,mem_le_name_len
	call memcpy_fast
	fetch 1,mem_shutter_config_data_temp
	copy pdata,loopcnt
	store 1,mem_local_name_length
	call memcpy_fast
	ifetch 1,contr
	store 1,mem_shutter_key_num
	ifetch 1,contr
	store 1,mem_shutter_hard_soft_switch_case
	rtn


shutter_load_bluetooth_config_by_eeprom:
	fetch 1,mem_shutter_bluetooth_type
	rtnbit0 CLASSIC_SHUTTER
	arg 3,temp
	fetch 2,mem_shutter_config_eeprom_offset_addr
	copy pdata,regb
	arg mem_shutter_config_eeprom_start_flag,rega
	call iicd_read_eep_data
	fetcht 2,mem_shutter_config_eeprom_start_flag
	setarg SHUTTER_EEPROM_CONFIG_CRC
	isub temp,null
	nrtn zero
	fetch 1,mem_shutter_config_user_size
	rtn blank
	copy pdata,temp
	fetch 2,mem_shutter_config_eeprom_offset_addr
	add pdata,3,regb
	arg mem_shutter_config_data_temp,rega
	call iicd_read_eep_data
	branch shutter_store_config

shutter_load_bluetooth_config_by_user_config:
	fetch 2,mem_shutter_config_user_otp_address
	rtn blank
	call otp_enable_chgpump
	arg 1,temp
	arg mem_shutter_config_user_size,rega
	call otpd_read_data
	
	fetch 1,mem_shutter_config_user_size
	rtn blank
	
	fetch 2,mem_shutter_config_user_otp_address
	pincrease 1
	arg mem_shutter_config_data_temp,rega
	fetcht 1,mem_shutter_config_user_size
	call otpd_read_data
	call otp_disable_chgpump
shutter_store_config:
	call shutter_load_bluetooth_config_store_name
shutter_load_bluetooth_config_custom:
	ifetch 2,contr
	rtn blank
	copy pdata,contw
	ifetcht 1,contr
	copy temp,loopcnt
	call memcpy
	branch shutter_load_bluetooth_config_custom
///////////////////////////////////////////////////////////////////

//////////////////////////random mac address//////////////////////////////
shutter_random_mac_addr:
	fetch 1,mem_shutter_bluetooth_type
	rtnbit0 CLASSIC_SHUTTER
	fetch 2,mem_classic_shutter_random_mac_offset_addr
	copy pdata,regb
	arg 4,temp
	arg mem_shutter_random_mac_data_temp,rega
	call iicd_read_eep_data
	fetch 1,mem_shutter_random_mac_data_temp
	bne 1,shutter_write_random_mac_addr_to_eeprom
shutter_write_random_mac_addr_to_eeprom:
	setarg 1
	store 1,mem_shutter_random_mac_data_temp
	force 3,loopcnt
	call generate_random_loop
	fetch 2,mem_classic_shutter_random_mac_offset_addr
	copy pdata,regb
	arg 4,temp
	arg mem_shutter_random_mac_data_temp,rega
	call iicd_write_eep_data
shutter_write_random_mac_addr:
	fetch 3,mem_shutter_random_mac_data_temp + 1
	store 3,mem_lap
	store 3,mem_le_lap
	rtn
	
/////////////////////////////////////////////////////////////////
shutter_soft_swtich_power_on:
	branch shutter_start_reconnect


shutter_soft_swtich_power_off:
	arg 0,rega
	arg mem_shutter_power_off_led_style,regc
	call ui_led_set_style_global
	call shutter_disconnect_current_connection
shutter_wait_power_off:
	fetch 1,mem_shutter_power_off_timeout
	store 1,mem_shutter_power_off_timer
	rtn
	

/*************soft swtich ui config*********************/
ui_soft_swtich_init:
	setarg SS_STATE_POWER_UP
	call ui_soft_swtich_init_power_on_time
	jam UI_BUTTON_STATE_UP,mem_ui_button_last_state
	call ui_button_init
	call ui_button_polling
	fetch 2,mem_ui_state_map
	rtnbit1 UI_STATE_BTN_DOWN
	branch app_enter_hibernate

ui_soft_swtich_init_power_on_time:
	fetcht 2,mem_power_param_ptr
	istore 1,temp		//init power state 
	ifetch 1,contw		//power on time
	store 1,mem_ui_button_timeout
	rtn


ui_soft_switch_botton_up:
	fetch 2,mem_power_param_ptr
	ifetch 1,pdata
	rtnne SS_STATE_POWER_UP
	branch app_enter_hibernate


ui_soft_switch_botton_long_press:
	fetcht 2,mem_power_param_ptr
	ifetch 1,temp
	beq SS_STATE_POWER_ON,ui_soft_switch_power_off
ui_soft_switch_power_on:
	setarg SS_STATE_POWER_ON
	fetcht 2,mem_power_param_ptr
	istore 1,temp		//init power state 
	add temp,SS_POWER_OFF_TIME,contr
	ifetch 1,contr
	istore 1,mem_ui_button_timeout
	ifetch 2,contr
	branch callback_func

ui_soft_switch_power_off:
	setarg SS_STATE_POWER_OFF
	call ui_soft_swtich_init_power_on_time
	add temp,SS_POWER_OFF_CB,contr
	ifetch 2,contr
	branch app_enter_hibernate,blank		//no call back function , just enter hibernate
	branch callback_func
	
/*************soft swtich ui config ending*********************/


/*************unkown function*********************/
shutter_byteswap:
	store 6,mem_tmp_buffer
	fetch 1,mem_tmp_buffer
	store 1,mem_tmp_buffer+11
	ifetch 1,contr
	store 1,mem_tmp_buffer+10
	ifetch 1,contr
	store 1,mem_tmp_buffer+9
	ifetch 1,contr
	store 1,mem_tmp_buffer+8
	ifetch 1,contr
	store 1,mem_tmp_buffer+7
	ifetch 1,contr
	store 1,mem_tmp_buffer+6
	fetch 6,mem_tmp_buffer+6
	rtn

shutter_random_addr_by_otp:
	call load_adc_init
	fetch 1,mem_1v_adc_io_data
	store 1,mem_le_lap
	fetch 1,mem_5v_adc_hvin_data
	istore 1,contw
	fetch 1,mem_3v_adc_vinlpm_data
	istore 1,contw
	fetch 3,mem_le_lap
	store 3,mem_lap
	rtn



//iic read function
//function name:sim_iic_read_eep_data
//input:
//temp:the length that simulation iic want to read eeprom data
//rega:the memmory point that simulation iic read data store
//regb:the eeprom address offset
//mark_eeprom_size:select 02 or other
//output:nc
sim_iic_read_eep_data:
	fetch 2,mem_eeprom_base
	iadd regb,pdata
	byteswap pdata,pdata
	store 2,mem_addr_mi
	copy temp,regb
	
	call sim_iic_start
	setarg 0xa0
	call sim_iic_send_byte
	fetch 1,mem_addr_mi
	call sim_iic_send_byte
	bmark1 mark_eeprom_size,sim_iic_read_eep_data_2k
	fetch 1,mem_addr_mi + 1
	call sim_iic_send_byte
sim_iic_read_eep_data_2k:
	call sim_iic_stop

	call sim_iic_start
	setarg 0xa1
	call sim_iic_send_byte

sim_iic_read_eep_data_loop:
	call sim_iic_read_byte
	istore 1,rega
	increase 1,rega
	increase -1,regb
	nbranch sim_iic_read_eep_data_loop,zero
	branch sim_iic_stop


//iic write data function
//function name:sim_iic_write_eep_data
//input:
//temp:the length that simulation iic want to write eeprom data
//rega:the memmory point that simulation iic write data read
//regb:the eeprom address
//mark_eeprom_size:select 02 or other
//output:nc
sim_iic_write_eep_data:
	byteswap regb,pdata
	store 2,mem_addr_mi
	copy temp,regb

	call sim_iic_start
	setarg 0xa0
	call sim_iic_send_byte

	fetch 1,mem_addr_mi
	call sim_iic_send_byte
	bmark1 mark_eeprom_size,sim_iic_write_eep_data_loop
	fetch 1,mem_addr_mi + 1
	call sim_iic_send_byte
sim_iic_write_eep_data_loop:
	ifetch 1,rega
	call sim_iic_send_byte
	increase 1,rega
	increase -1,regb
	nbranch sim_iic_write_eep_data_loop,zero
	branch sim_iic_stop
//	bmark1 mark_eeprom_size

//use reg:pdata,contr,contw,loopcnt
sim_iic_wait_ack:
	arg 10,loopcnt
	call sim_iic_release_sda
	call sim_iic_scl_output_high	//scl = 1
	call sim_iic_delay				//delay 2.5us
sim_iic_wait_ack_loop:
	call sim_iic_read_sda_level
	branch sim_iic_scl_output_low,blank	//scl = 0
	loop sim_iic_wait_ack_loop
	branch sim_iic_scl_output_low		//scl = 0	


//use reg:pdata,contr,contw,rega,queue
sim_iic_ack_slave:
	call sim_iic_scl_output_low		//scl = 0	
	call sim_iic_sda_output_low		//sda = 0
	call sim_iic_delay				//delay 2.5us
	call sim_iic_scl_output_high	//scl = 1
	call sim_iic_delay				//delay 2.5us
	branch sim_iic_scl_output_low	//scl = 0	


//output:pdata receive byte data
//use reg:pdata,contr,contw,loopcnt,regc,rega
sim_iic_read_byte:
	arg 8,loopcnt
	arg 0,regc
	call sim_iic_release_sda
sim_iic_read_byte_loop:
	call sim_iic_scl_output_high	//scl = 1
	call sim_iic_delay				//delay 2.5us
	lshift regc,regc	
	call sim_iic_read_sda_level
	iadd regc,regc
	call sim_iic_delay				//delay 2.5us
	call sim_iic_scl_output_low		//scl = 0	
	loop sim_iic_read_byte_loop
	call sim_iic_ack_slave
	copy regc,pdata
	rtn

//input:pdata send byte data
//use reg:pdata,contr,contw,loopcnt,regc,rega
sim_iic_send_byte:
	arg 8,loopcnt
	copy pdata,regc
	call sim_iic_scl_output_low		//scl = 0	
sim_iic_send_byte_loop:
	isolate1 7,regc
	call sim_iic_sda_output_high,true	//sda = 1
	ncall sim_iic_sda_output_low,true	//sda = 0
	lshift regc,regc
	call sim_iic_delay				//delay 2.5us
	call sim_iic_scl_output_high	//scl = 1
	call sim_iic_delay				//delay 2.5us
	call sim_iic_scl_output_low		//scl = 0	
	call sim_iic_delay				//delay 2.5us
	loop sim_iic_send_byte_loop
	branch sim_iic_wait_ack


//use reg:pdata,contr,contw,rega
sim_iic_start:
	call sim_iic_sda_output_high	//sda = 1
	call sim_iic_scl_output_high	//scl = 1
	call sim_iic_delay				//delay 2.5us
	call sim_iic_sda_output_low		//sda = 0
	call sim_iic_delay				//delay 2.5us
	branch sim_iic_scl_output_low		//scl = 0


//use reg:pdata,contr,contw,rega
sim_iic_stop:
	call sim_iic_sda_output_low		//sda = 0
	call sim_iic_scl_output_high	//scl = 1
	call sim_iic_delay				//delay 2.5us
	call sim_iic_sda_output_high	//sda = 1
	branch sim_iic_delay				//delay 2.5us


//scl = 1
sim_iic_scl_output_high:
	enable user
	fetch 1,SIM_IIC_SCL_GPIO_NUM
	branch sim_iic_config_gpio

//scl = 0
sim_iic_scl_output_low:
	disable user
	fetch 1,SIM_IIC_SCL_GPIO_NUM
	branch sim_iic_config_gpio

//sda = 1
sim_iic_sda_output_high:
	enable user
	fetch 1,SIM_IIC_SDA_GPIO_NUM
	branch sim_iic_config_gpio

//sda = 0
sim_iic_sda_output_low:
	disable user
	fetch 1,SIM_IIC_SDA_GPIO_NUM
	branch sim_iic_config_gpio

//input:pdata the gpio number
//input:user flag, if enable user,config gpio output high level; if disable user, config gpio output low level
//use reg:pdata,contr,contw,queue,rega
sim_iic_config_gpio:
	and pdata,0x07,queue
	rshift3 pdata,pdata
	arg core_gpio_oe0,temp
	iadd temp,temp
	ifetch 1,temp
	qset1 pdata
	istore 1,temp
	increase 4,temp
	ifetch 1,temp
	qsetflag user,pdata
	istore 1,temp
	rtn


sim_iic_release_sda:
	fetch 1,SIM_IIC_SDA_GPIO_NUM
	and pdata,0x07,queue
	rshift3 pdata,pdata
	arg core_gpio_oe0,temp
	iadd temp,temp
	ifetch 1,temp
	qset0 pdata
	istore 1,temp
	rtn	

//get sda level
//output:if sda high level ,pdata is 1;if sda low level ,pdata is 0
//use reg:pdata,contr,contw,queue,rega,temp
sim_iic_read_sda_level:
	nop 4
	fetch 1,SIM_IIC_SDA_GPIO_NUM
	and pdata,0x07,queue
	rshift3 pdata,pdata
	arg core_gpio_in,temp
	iadd temp,temp
	setarg 0
	ifetcht 1,temp
	qisolate1 temp
	setflag true,0,pdata
	rtn	

//delay 2.5us
sim_iic_delay:
//	nop 1
	rtn

/**********************************/


else
        branch assert
	
endif
